API GATEWAY (Puerta de enlace):
	Enrutador de peticiones.
	Expone los microservicios al cliente en un solo endpoint.
	Administra los endpoints internamente.
	Gestiona la seguridad.
	Ejemplo de proveedores: Microsoft(API Management), Amazon(AWS API Gateway).

SERVERLESS (Sin Servidor):
	Termino se refiere a que no tienes que administrar o configurar servidores el proveedor de la nube lo debe de hacer.
	No tienes un servidor encendido si el proveedor asigna los recursos cuando se ejecuta la aplicacion y luego los apaga.
	Ejemplo de proveedores: Google(Coud Functions), Microsoft (Azure Functions), Amazon(AWS Lambda).

DOCKER
	Contiene el microservicio y sus dependencias y lo mantiene aislado.

KUBERNETES
	Configurar, adminiostar y escalar contenedores.


PRINCIPIOS SOLID:
	(S) Principo de responsabilidad Unica (Single Responsibility Principle - SRP).
		- Una clase debe de tener una unica responsabilidad.
	(O) Principio de Abierto/Cerrado (Open/Closed Principle - OCP).
		- Cerrada para su modificaci贸n, pero abierta para su extenci贸n.
	(L) Principio de sustituci贸n de Liskov (Liskov Substitution Principle - LSP).
		- Si tenemos clases padres y clases hijas (herencia), las instancias de las clases hijas y las instancias 
		  de la clase padre deben de poder intercambiarse sin recibir resultados inesperados (se debe de evitar agregar 
		  reestricciones o cambiar el comportamiento heredado de una clase para no tener comportamientos inesperados).
	(I) Principio de segregaci贸n de interfaces (Interface Segregation Principle - ISP)
		- Los clientes no deben de verse obligados a depender de interfaces que no utilizan (un cliente solo debe de 
		  conocer los metodos que no va a utilizar)
	(D) Principio de inversion de dependencias (Dependency Inversion Principle - DIP)
		- Las clases de alto nivel no deben de depender de las de bajo nivel, ambas deben de depender de abstraciones. 



Feign Client
	Para comunicarse a otros microservicios se puede utilizar feign client que trabaja mediante interfaces para las peticiones REST.

Config Server
	Se puede obtener las configuraciones de los microservicios mediante esta tegnologia para esto se ocupa tener un
	miccroservicio donde vamos a obtener las propiedades para nuestro microservicio. para el servicio configurador se 
	debe de tener la siguiente dependencia.
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.0</spring-cloud.version>
	</properties>
	<dependency>
		<groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-config-server</artifactId>
	</dependency>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	en application.yml ejemplo:
	server:
  		port: 5004
	spring:
  		cloud:
    			config:
      				server:
        				git:
          					default-label: main
          					uri: https://github.com/EduardoErenasL/micro-service
          					search-paths: config-data
  		application:
    			name: config-service
	Y el los demas servicios ocuparan:
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.0</spring-cloud.version>
	</properties>
	<dependency>
		<groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-starter-config</artifactId>
	</dependency>

	<dependency>
		<groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-starter-bootstrap</artifactId>
	</dependency>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	bootstrap.yml ejemplo (el application.properties se cambia por este yml)
	spring:
  		application:
    			name: user-service
  		cloud:
    			config:
      				enabled: true
      				uri: http://localhost:5004
  		datasource:
    			url: jdbc:h2:mem:microuser
    			driverClassName: org.h2.Driver
    			username: sa
    			password: password
  		jpa:
    			database-platform: org.hibernate.dialect.H2Dialect
    			hibernate:
      				ddl-auto: create